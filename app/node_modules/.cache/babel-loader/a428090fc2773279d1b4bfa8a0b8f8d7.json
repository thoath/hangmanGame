{"ast":null,"code":"class HangmanService {\n  constructor() {\n    this.response = {\n      numCharacter: 0,\n      errorMessage: null,\n      found: false,\n      indexFound: [],\n      characterUsed: [],\n      charactersFound: [],\n      attempts: 0,\n      isGameOver: false,\n      isLastWord: false,\n      isWordCompleted: false\n    };\n  }\n\n  async newGame() {\n    const response = await fetch('/api/newGame');\n    const body = await response.json();\n    this.response = {\n      numCharacter: body,\n      errorMessage: body.message\n    };\n    return Promise.resolve(this.response);\n  }\n\n  async getNewWord() {\n    const response = await fetch('/api/getNewWord');\n    const body = await response.json();\n    this.response = {\n      numCharacter: body,\n      errorMessage: body.message\n    };\n    return Promise.resolve(this.response);\n  }\n\n  async checkCharacter(character) {\n    const response = await fetch('/api/checkCharacter/' + character, {\n      method: 'POST'\n    });\n    const body = await response.json();\n    this.response = {\n      numCharacter: body.currentWordLength,\n      found: body.found,\n      indexFound: body.indexFound,\n      characterUsed: body.characterUsed,\n      charactersFound: body.charactersFound,\n      attempts: body.attempts,\n      character: body.character,\n      isGameOver: body.isGameOver,\n      isLastWord: body.isLastWord,\n      isWordCompleted: body.isWordCompleted,\n      errorMessage: body.message\n    };\n    return Promise.resolve(this.response);\n  }\n\n}\n\nexport default HangmanService;","map":{"version":3,"sources":["C:\\Users\\lucas.luz\\Documents\\Meta\\HangmanService\\app\\src\\components\\hangmanService.js"],"names":["HangmanService","constructor","response","numCharacter","errorMessage","found","indexFound","characterUsed","charactersFound","attempts","isGameOver","isLastWord","isWordCompleted","newGame","fetch","body","json","message","Promise","resolve","getNewWord","checkCharacter","character","method","currentWordLength"],"mappings":"AAAA,MAAMA,cAAN,CAAqB;AAEnBC,EAAAA,WAAW,GAAG;AACb,SAAKC,QAAL,GAAgB;AACjBC,MAAAA,YAAY,EAAC,CADI;AAEjBC,MAAAA,YAAY,EAAC,IAFI;AAGjBC,MAAAA,KAAK,EAAC,KAHW;AAIjBC,MAAAA,UAAU,EAAC,EAJM;AAKjBC,MAAAA,aAAa,EAAC,EALG;AAMjBC,MAAAA,eAAe,EAAC,EANC;AAOjBC,MAAAA,QAAQ,EAAC,CAPQ;AAQjBC,MAAAA,UAAU,EAAC,KARM;AASjBC,MAAAA,UAAU,EAAC,KATM;AAUjBC,MAAAA,eAAe,EAAC;AAVC,KAAhB;AAYA;;AAGD,QAAMC,OAAN,GAAgB;AACf,UAAMX,QAAQ,GAAG,MAAMY,KAAK,CAAC,cAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAT,EAAnB;AACA,SAAKd,QAAL,GAAgB;AAACC,MAAAA,YAAY,EAACY,IAAd;AAAoBX,MAAAA,YAAY,EAACW,IAAI,CAACE;AAAtC,KAAhB;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKjB,QAArB,CAAP;AACA;;AAED,QAAMkB,UAAN,GAAmB;AAClB,UAAMlB,QAAQ,GAAG,MAAMY,KAAK,CAAC,iBAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAT,EAAnB;AACA,SAAKd,QAAL,GAAgB;AAACC,MAAAA,YAAY,EAACY,IAAd;AAAoBX,MAAAA,YAAY,EAACW,IAAI,CAACE;AAAtC,KAAhB;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKjB,QAArB,CAAP;AACA;;AAED,QAAMmB,cAAN,CAAqBC,SAArB,EAAgC;AAC/B,UAAMpB,QAAQ,GAAG,MAAMY,KAAK,CAAC,yBAAuBQ,SAAxB,EAAkC;AAACC,MAAAA,MAAM,EAAC;AAAR,KAAlC,CAA5B;AACA,UAAMR,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAT,EAAnB;AAEA,SAAKd,QAAL,GAAgB;AAACC,MAAAA,YAAY,EAACY,IAAI,CAACS,iBAAnB;AACbnB,MAAAA,KAAK,EAACU,IAAI,CAACV,KADE;AAEbC,MAAAA,UAAU,EAACS,IAAI,CAACT,UAFH;AAGbC,MAAAA,aAAa,EAACQ,IAAI,CAACR,aAHN;AAIbC,MAAAA,eAAe,EAACO,IAAI,CAACP,eAJR;AAKbC,MAAAA,QAAQ,EAACM,IAAI,CAACN,QALD;AAMba,MAAAA,SAAS,EAACP,IAAI,CAACO,SANF;AAObZ,MAAAA,UAAU,EAACK,IAAI,CAACL,UAPH;AAQbC,MAAAA,UAAU,EAACI,IAAI,CAACJ,UARH;AASbC,MAAAA,eAAe,EAACG,IAAI,CAACH,eATR;AAUbR,MAAAA,YAAY,EAACW,IAAI,CAACE;AAVL,KAAhB;AAYA,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKjB,QAArB,CAAP;AACA;;AAjDkB;;AAqDrB,eAAeF,cAAf","sourcesContent":["class HangmanService {\r\n\t\r\n  constructor() {\r\n\t  this.response = {\r\n\t\tnumCharacter:0,\r\n\t\terrorMessage:null,\r\n\t\tfound:false,\r\n\t\tindexFound:[],\r\n\t\tcharacterUsed:[],\r\n\t\tcharactersFound:[],\r\n\t\tattempts:0,\r\n\t\tisGameOver:false,\r\n\t\tisLastWord:false,\r\n\t\tisWordCompleted:false\r\n\t  }  \r\n  };\r\n\t\r\n\t\r\n  async newGame() {\r\n\t  const response = await fetch('/api/newGame');\r\n\t  const body = await response.json();\r\n\t  this.response = {numCharacter:body, errorMessage:body.message};\r\n\t  return Promise.resolve(this.response);\r\n  };\r\n  \r\n  async getNewWord() {\r\n\t  const response = await fetch('/api/getNewWord');\r\n\t  const body = await response.json();\r\n\t  this.response = {numCharacter:body, errorMessage:body.message};\r\n\t  return Promise.resolve(this.response);\r\n  };\r\n\t\r\n  async checkCharacter(character) {\r\n\t  const response = await fetch('/api/checkCharacter/'+character,{method:'POST'});\r\n\t  const body = await response.json();\r\n    \r\n\t  this.response = {numCharacter:body.currentWordLength,\r\n    \t\tfound:body.found,\r\n    \t\tindexFound:body.indexFound,\r\n    \t\tcharacterUsed:body.characterUsed,\r\n    \t\tcharactersFound:body.charactersFound,\r\n    \t\tattempts:body.attempts,\r\n    \t\tcharacter:body.character,\r\n    \t\tisGameOver:body.isGameOver,\r\n    \t\tisLastWord:body.isLastWord,\r\n    \t\tisWordCompleted:body.isWordCompleted,\r\n    \t\terrorMessage:body.message};\r\n    \r\n\t  return Promise.resolve(this.response);\r\n  };\r\n\r\n}\r\n\r\nexport default HangmanService;"]},"metadata":{},"sourceType":"module"}