{"ast":null,"code":"class HangmanService {\n  constructor() {\n    this.response = {\n      numCharacter: 0,\n      errorMessage: null,\n      found: null,\n      characterUsed: [],\n      charactersFound: [],\n      attempts: 0,\n      isGameOver: null,\n      isLastWord: null,\n      isWordCompleted: null\n    };\n  }\n\n  async newGame() {\n    const response = await fetch('/api/newGame');\n    const body = await response.json();\n\n    if (body.message) {\n      this.response = {\n        errorMessage: body.message\n      };\n    } else {\n      this.response = {\n        numCharacter: body,\n        found: null,\n        characterUsed: null,\n        charactersFound: null,\n        attempts: null,\n        isGameOver: null,\n        isLastWord: null,\n        isWordCompleted: null\n      };\n    }\n\n    return Promise.resolve(this.response);\n  }\n\n  async getNewWord() {\n    const response = await fetch('/api/getNextWord');\n    const body = await response.json();\n\n    if (body.message) {\n      this.response = {\n        errorMessage: body.message\n      };\n    } else {\n      this.response = {\n        numCharacter: body,\n        found: null,\n        characterUsed: null,\n        charactersFound: null,\n        attempts: null,\n        isGameOver: null,\n        isLastWord: null,\n        isWordCompleted: null\n      };\n    }\n\n    return Promise.resolve(this.response);\n  }\n\n  async checkCharacter(character) {\n    const response = await fetch('/api/checkCharacter/' + character, {\n      method: 'POST'\n    });\n    const body = await response.json();\n\n    if (body.message) {\n      this.response = {\n        errorMessage: body.message\n      };\n    } else {\n      this.response = {\n        numCharacter: body.currentWordLength,\n        errorMessage: body.message,\n        found: body.found,\n        characterUsed: body.characterUsed,\n        charactersFound: body.charactersFound,\n        attempts: body.attempts,\n        isGameOver: body.gameOver,\n        isLastWord: body.lastWord,\n        isWordCompleted: body.wordCompleted\n      };\n    }\n\n    return Promise.resolve(this.response);\n  }\n\n}\n\nexport default HangmanService;","map":{"version":3,"sources":["C:\\Users\\lucas.luz\\Documents\\Meta\\HangmanService\\app\\src\\components\\hangmanService.js"],"names":["HangmanService","constructor","response","numCharacter","errorMessage","found","characterUsed","charactersFound","attempts","isGameOver","isLastWord","isWordCompleted","newGame","fetch","body","json","message","Promise","resolve","getNewWord","checkCharacter","character","method","currentWordLength","gameOver","lastWord","wordCompleted"],"mappings":"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","sourcesContent":["class HangmanService {\r\n\t\r\n  constructor() {\r\n\t  this.response = {\r\n\t\tnumCharacter:0,\r\n\t\terrorMessage:null,\r\n\t\tfound:null,\r\n\t\tcharacterUsed:[],\r\n\t\tcharactersFound:[],\r\n\t\tattempts:0,\r\n\t\tisGameOver:null,\r\n\t\tisLastWord:null,\r\n\t\tisWordCompleted:null\r\n\t  }  \r\n  };\r\n\t\r\n\t\r\n  async newGame() {\r\n\t  const response = await fetch('/api/newGame');\r\n\t  const body = await response.json();\r\n\t  \r\n\t  if (body.message) {\r\n\t\t  this.response = {\r\n\t\t\t\t\terrorMessage:body.message};\r\n\t  } else {\r\n\t\t  this.response = {\r\n\t\t\t\t  numCharacter:body,\r\n\t\t\t\t  found:null,\r\n\t\t\t\t  characterUsed:null,\r\n\t\t\t\t  charactersFound:null,\r\n\t\t\t\t  attempts:null,\r\n\t\t\t\t  isGameOver:null,\r\n\t\t\t\t  isLastWord:null,\r\n\t\t\t\t  isWordCompleted:null};\r\n\t  }\r\n\t  \r\n\t  \r\n\t  return Promise.resolve(this.response);\r\n  };\r\n  \r\n  async getNewWord() {\r\n\t  const response = await fetch('/api/getNextWord');\r\n\t  const body = await response.json();\r\n\t  \r\n\t  if (body.message) {\r\n\t\t  this.response = {\r\n\t\t\t\t\terrorMessage:body.message};\r\n\t  } else {\r\n\t\t  this.response = {\r\n\t\t\t\t\tnumCharacter:body,\r\n\t\t    \t\tfound:null,\r\n\t\t    \t\tcharacterUsed:null,\r\n\t\t    \t\tcharactersFound:null,\r\n\t\t    \t\tattempts:null,\r\n\t\t    \t\tisGameOver:null,\r\n\t\t    \t\tisLastWord:null,\r\n\t\t    \t\tisWordCompleted:null};\r\n\t  }\r\n\t  \r\n\t  return Promise.resolve(this.response);\r\n  };\r\n\t\r\n  async checkCharacter(character) {\r\n\t  const response = await fetch('/api/checkCharacter/'+character,{method:'POST'});\r\n\t  const body = await response.json();\r\n\t  if (body.message) {\r\n\t\t  this.response = {\r\n\t\t\t\t\terrorMessage:body.message};\r\n\t  } else {\r\n\t\t  this.response = {\r\n\t\t\t\t\tnumCharacter:body.currentWordLength,\r\n\t\t\t\t\terrorMessage:body.message,\r\n\t\t    \t\tfound:body.found,\r\n\t\t    \t\tcharacterUsed:body.characterUsed,\r\n\t\t    \t\tcharactersFound:body.charactersFound,\r\n\t\t    \t\tattempts:body.attempts,\r\n\t\t    \t\tisGameOver:body.gameOver,\r\n\t\t    \t\tisLastWord:body.lastWord,\r\n\t\t    \t\tisWordCompleted:body.wordCompleted};\r\n\t  }\r\n\r\n    \r\n\t  return Promise.resolve(this.response);\r\n  };\r\n\r\n}\r\n\r\nexport default HangmanService;"]},"metadata":{},"sourceType":"module"}